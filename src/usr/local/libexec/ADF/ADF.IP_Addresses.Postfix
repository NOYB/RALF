#!/bin/bash

# Copyright (c) 2010-2017 Al Stu, All rights reserved.

# Automated Dynamic Firewall - Postfix
Version="0.0.1"
Date="Aug 8, 2010"

#
# Begin - System Config Specific Constants
#

# Some tweaking of the static non-regex portions of the <CATEGORY>_<TYPENAME>_RegEx variables in the RegEx section below may also be necessary.

System_Config_App_Specific() {
#	Server_Name="VPS1"			# Overrides the system hostname.
	SERVICE_NAME="Postfix"

	# Automated Dynamic Firewall directory (with trailing slash)
	ADF_DIR="/var/log/ADF/Postfix/"

	# Service log directory (with trailing slash)
	LOG_FILES_DIR="/var/log/postfix/"

	# Script to create/apply/update the IP set (full absolute path).
	IPSET_SCRIPT=("/usr/local/libexec/Block_Lists/ADF_SMTP_DROP.sh")

	# Array of log file sets to use.
	# LOG_FILE_NAME, NUM_LOG_FILE_VERSIONS to scrape, TYPES_PREFIX, LOG_SET_CATEGORY, TYPES array name (space delimited).
	unset LOG_SETS
	LOG_SETS[1]="postfix-mx 5 SMTP MX TYPES_MX"
	LOG_SETS[2]="postfix-msa 5 SMTP MSA TYPES_MSA"

	# Note: Number of log file versions to scrape:
	# e.g. value of 2 for current log file plus *.(0|1) log file.
	# Scraping of at least 2 log files is desirable so that when rotation provides a new empty log file,
	# the firewall entries from at least the one previous log file will remain in effect.
	# However initially it may be best to scrape only the current log file to keep the data set smaller.
	# Then once the size of log files is reduced, increase the number of log files being scraped.
	# Another approach would be to begin with a fresh set of log files.

	# Definitions for regular expressions of what to include.  Such as NOQUEUE reject types.
	# Array of CATEGORY, TYPENAME, COUNT, and FIREWALL_ACTION (space delimited).
	unset TYPES_MX
	TYPES_MX[1]='MX RBL 1 DROP'
	TYPES_MX[2]='MX PTR 3 DROP'
	TYPES_MX[3]='MX HOSTNAME 3 DROP'
	TYPES_MX[4]='MX RELAY 3 DROP'
	TYPES_MX[5]='MX HELO 6 DROP'
	TYPES_MX[6]='MX RHSBL 2 DROP'
	TYPES_MX[7]='MX SPF_HELO 6 DROP'
	TYPES_MX[8]='MX SPF_FROM 3 RETURN'
	TYPES_MX[9]='MX PermBlok 1 DROP'

	unset TYPES_MSA
	TYPES_MSA[1]='MSA RATE_LIMIT 1 DROP'

# Postfix Specific
	# Additional items that will be used to identify lines to scrape from log files.
	# Regular Expression can be used
	#MX_Mail_Service_Name="postfix"
	MX_Mail_Service_Name="postfix-mx"
	MX_Mail_Daemon_Name="smtpd"

	MSA_Mail_Service_Name="postfix-msa"
	MSA_Mail_Daemon_Name="smtpd"

# This has not been included in the refactoring and may or may not be in the future.
#	# Explicit List (array) of Log files to scrape (hint: oldest first order is preferred)
#	# This is used if NUM_LOG_FILES value is 0
#	# Examples:
#	 LOG_FILES=("$LOG_FILES_DIR$SERVICE_NAME.$PERM_BLOCK_FILE_EXT" "$LOG_FILES_DIR$LOG_FILE_NAME")
#	#LOG_FILES=("$LOG_FILES_DIR$SERVICE_NAME.$PERM_BLOCK_FILE_EXT" "$LOG_FILES_DIR$LOG_FILE_NAME.1" "$LOG_FILES_DIR$LOG_FILE_NAME")
#	#LOG_FILES=("$LOG_FILES_DIR$SERVICE_NAME.$PERM_BLOCK_FILE_EXT" "$LOG_FILES_DIR$LOG_FILE_NAME.2" "$LOG_FILES_DIR$LOG_FILE_NAME.1" "$LOG_FILES_DIR$LOG_FILE_NAME")
#	#LOG_FILES=("$LOG_FILES_DIR$SERVICE_NAME.$PERM_BLOCK_FILE_EXT" "$LOG_FILES_DIR$LOG_FILE_NAME.3" "$LOG_FILES_DIR$LOG_FILE_NAME.2" "$LOG_FILES_DIR$LOG_FILE_NAME.1" "$LOG_FILES_DIR$LOG_FILE_NAME")
}

#
# End - System Config Specific Constants
#


# Regular Expression (RegEx) Patterns
RegEx_Patterns_App_Specific() {

	MX_Mail_Service_Name_RegEx=$MX_Mail_Service_Name
	MX_Mail_Daemon_Name_RegEx=$MX_Mail_Daemon_Name

	Service_Number_RegEx='[0-9]*'

	SMTP_Status_Code_RegEx='[0-9]{3} ([0-9]\.){2}([0-9])'
	#SMTP_Status_Code_RegEx='521 5.7.1'

	# Common MX log strings, for each type of NOQUEUE Reject
	MX_Scrape_RegEx='NOQUEUE: ?.* reject: ?'
	MX_from_RegEx="(CONNECT|HELO|EHLO|MAIL|RCPT|VRFY) from .*\[$IPv4_RegEx($CIDR_RegEx)?\]: $SMTP_Status_Code_RegEx"
	MX_Prefix_RegEx="^$Month_Abbr_RegEx  ?$Day_RegEx  ?$Time_24_HHMMss_RegEx $Server_Name_RegEx $MX_Mail_Service_Name_RegEx/$MX_Mail_Daemon_Name_RegEx\[$Service_Number_RegEx\]: $MX_Scrape_RegEx $MX_from_RegEx"

	# MX log strings to look for, for each type of NOQUEUE Reject
	     MX_RBL_RegEx="$MX_Prefix_RegEx Service unavailable; Client host \[$IPv4_RegEx\] blocked using .*( from=<.*@.*>)?( to=<.*@.*>)? proto=.*SMTP( helo=<.*>)?$"
	     MX_PTR_RegEx="$MX_Prefix_RegEx Client host rejected: cannot find your reverse hostname, \[$IPv4_RegEx\];( from=<.*@.*>)?( to=<.*@.*>)? proto=.*SMTP( helo=<.*>)?$"
	MX_HOSTNAME_RegEx="$MX_Prefix_RegEx Client host rejected: cannot find your hostname, \[$IPv4_RegEx\];( from=<.*@.*>)?( to=<.*@.*>)? proto=.*SMTP( helo=<.*>)?$"

	   MX_RELAY_RegEx="$MX_Prefix_RegEx( <.*@.*>:)? Relay access denied;( from=<.*@.*>)?( to=<.*@.*>)? proto=.*SMTP( helo=<.*>)?$"

	   MX_RHSBL_RegEx="$MX_Prefix_RegEx .* blocked using dbl.* proto=.*SMTP helo=<.*>$"
#	   MX_RHSBL_RegEx="$MX_Prefix_RegEx Service unavailable; Sender address \[.*@.*\] blocked using .* from=<.*@.*>( to=<.*@.*>)? proto=.*SMTP helo=<.*>$"

	    MX_HELO_RegEx="$MX_Prefix_RegEx <.*>: Helo command rejected: (need).*; proto=.*SMTP helo=<.*>$"
	MX_SPF_HELO_RegEx="$MX_Prefix_RegEx <.*>: Helo command rejected: Message rejected due to: .* http://www\.openspf\.(org|net)/Why\?s=helo;.*( from=<.*@.*>)?( to=<.*@.*>)? proto=.*SMTP helo=<.*>$"
	MX_SPF_FROM_RegEx="$MX_Prefix_RegEx <.*@.*>: Sender address rejected: Message rejected due to: .* http://www\.openspf\.(org|net)/Why\?s=mfrom;.* from=<.*@.*>( to=<.*@.*>)? proto=.*SMTP helo=<.*>$"

	MX_PermBlok_RegEx="$MX_Prefix_RegEx (Client host rejected:|Service unavailable;) Permanent (Client|Network) Block; proto=.*SMTP$"



	MSA_Mail_Service_Name_RegEx=$MSA_Mail_Service_Name
	MSA_Mail_Daemon_Name_RegEx=$MSA_Mail_Daemon_Name

	MSA_Scrape_RegEx='warning: ?'

	MSA_Prefix_RegEx="^$Month_Abbr_RegEx  ?$Day_RegEx  ?$Time_24_HHMMss_RegEx $Server_Name_RegEx $MSA_Mail_Service_Name_RegEx/$MSA_Mail_Daemon_Name_RegEx\[$Service_Number_RegEx\]: ?"

	MSA_RATE_LIMIT_RegEx="$MSA_Prefix_RegEx.*rate limit exceeded.*$"

	MSA_PermBlok_RegEx="$MSA_Prefix_RegEx .*STATIC$"
}


Log_Set_Type_Scrape() {
		# Scrape Log Files for Entries to Include
		# echo 
		# echo "$CATEGORY $TYPENAME IP Addresses Log"
		# 1) awk - Scrape log file for entries of interest using awk with Log_RegEx regular expression and output (print) desired fields (month, day, time, IP address).
		# 2) sort - Sort in reverse order by IP address, day, and time fields (newest first).
		# 3) uniq - Remove duplicate lines without comparing the first 3 fields (-f skip fields) and prefix lines with count of occurrences (duplicates plus original).
		# 4) sort - Chronologically (oldest first) (iptables insert will result in newest first/top firewall chain rule order).
		# 5) Save results to file for later use.
		cat "$ADF_DIR$LOG_FILE_NAME.ADF.IP_Addresses.Log" \
		|awk --posix -F "[][]| +" -v Log_RegEx="$Log_RegEx_2Esc" -v CATEGORY="$CATEGORY" -v TYPENAME="$TYPENAME" '{ if ($0 ~ Log_RegEx) { if ($2 ~ "^[0-9]$") $2=" "$2; if ((TYPENAME == "HELO") || (TYPENAME == "SPF_HELO")) $25="\t"$NF; else $25=""; if (TYPENAME == "SPF_FROM") $22="\t"$(NF-2); else $22=""; if (TYPENAME == "RBL") $26="\t"$26; else $26=""; if (TYPENAME == "RATE_LIMIT") $13=$18; print $1 " " $2 " " $3 " " $13 "\t" $12 $22 $25 $26 } }' \
		|sort -b -k 4,4 -k 1,1Mr -k 2,2nr -k 3,3r \
		|uniq -c -f 3 \
		|sort -b -k 2,2M -k 3,3n -k 4,4 -k 5,5n \
		>"$FILE_NAME_TYPE_LOG"

		IP_FIELD='5'	# Log_Set_Type_Finish() needs the IP address field number.
}


DIR="${BASH_SOURCE%/*}"
#if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "$DIR/ADF.IP_Addresses.Common.sh"

Main $@
