#!/bin/bash

# Copyright (c) 2010-2017 Al Stu, All rights reserved.

# Automated Dynamic Firewall - BIND
Version="0.0.1"
Date="Apr 4, 2017"

#
# Begin - System Config Specific Constants
#

# Some tweaking of the static non-regex portions of the <CATEGORY>_<TYPENAME>_RegEx variables in the RegEx section below may also be necessary.

System_Config_App_Specific() {
#	Server_Name="VPS1"			# Overrides the system hostname.
	SERVICE_NAME="BIND"

	# Automated Dynamic Firewall directory (with trailing slash)
	ADF_DIR="/var/log/ADF/BIND/"

	# Service log directory (with trailing slash)
	LOG_FILES_DIR="/var/named/data/"

	# Script to create/apply/update the IP set (full absolute path).
	IPSET_SCRIPT_IPv4=("/usr/local/libexec/Block_Lists/ADF_DNS_DROP.sh")
	IPSET_SCRIPT_IPv6=("/usr/local/libexec/Block_Lists/ADF_DNS_DROP.sh" update IPv6)

	# Array of log file sets to use.
	# LOG_FILE_NAME, NUM_LOG_FILE_VERSIONS to scrape, TYPES_PREFIX, LOG_SET_CATEGORY, TYPES array name (space delimited).
	unset LOG_SETS
	LOG_SETS[1]="client_security.log 5 DNS SECURITY TYPES_SECURITY"
	LOG_SETS[2]="rate_limiting.log 5 DNS RATE_LIMIT TYPES_RATE_LIMIT"
#	LOG_SETS[3]="query-errors.log 5 DNS QUERY_ERRORS TYPES_QUERY_ERRORS"

	# Note: Number of log file versions to scrape:
	# e.g. value of 2 for current log file plus *.(0|1) log file.
	# Scraping of at least 2 log files is desirable so that when rotation provides a new empty log file,
	# the firewall entries from at least the one previous log file will remain in effect.
	# However initially it may be best to scrape only the current log file to keep the data set smaller.
	# Then once the size of log files is reduced, increase the number of log files being scraped.
	# Another approach would be to begin with a fresh set of log files.

	# Definitions for regular expressions of what to include.  Such as Query types.
	# Array of CATEGORY, TYPENAME, COUNT, and FIREWALL_ACTION (space delimited).
	unset TYPES_SECURITY
	TYPES_SECURITY[1]='Query Cache 1 DROP'
	TYPES_SECURITY[2]='SECURITY STATIC 1 DROP'

	unset TYPES_RATE_LIMIT
	TYPES_RATE_LIMIT[1]='Rate_Limit NODATA 5 DROP'
	TYPES_RATE_LIMIT[2]='Rate_Limit NXDOMAIN 5 DROP'
	TYPES_RATE_LIMIT[3]='Rate_Limit REFUSED 5 DROP'
	TYPES_RATE_LIMIT[4]='Rate_Limit ALL 8 DROP'
	TYPES_RATE_LIMIT[5]='RATE_LIMIT STATIC 1 DROP'

#	unset TYPES_QUERY_ERRORS
#	TYPES_QUERY_ERRORS[1]='Query Error 5 DROP'
#	TYPES_QUERY_ERRORS[2]='QUERY_ERRORS STATIC 5 DROP'

# This has not been included in the refactoring and may or may not be in the future.
#	# Explicit List (array) of Log files to scrape (hint: oldest first order is preferred)
#	# This is used if NUM_LOG_FILES value is 0
#	# Examples:
#	 LOG_FILES=("$LOG_FILES_DIR$SERVICE_NAME.$PERM_BLOCK_FILE_EXT" "$LOG_FILES_DIR$LOG_FILE_NAME")
#	#LOG_FILES=("$LOG_FILES_DIR$SERVICE_NAME.$PERM_BLOCK_FILE_EXT" "$LOG_FILES_DIR$LOG_FILE_NAME.1" "$LOG_FILES_DIR$LOG_FILE_NAME")
#	#LOG_FILES=("$LOG_FILES_DIR$SERVICE_NAME.$PERM_BLOCK_FILE_EXT" "$LOG_FILES_DIR$LOG_FILE_NAME.2" "$LOG_FILES_DIR$LOG_FILE_NAME.1" "$LOG_FILES_DIR$LOG_FILE_NAME")
#	#LOG_FILES=("$LOG_FILES_DIR$SERVICE_NAME.$PERM_BLOCK_FILE_EXT" "$LOG_FILES_DIR$LOG_FILE_NAME.3" "$LOG_FILES_DIR$LOG_FILE_NAME.2" "$LOG_FILES_DIR$LOG_FILE_NAME.1" "$LOG_FILES_DIR$LOG_FILE_NAME")
}

#
# End - System Config Specific Constants
#


# Regular Expression (RegEx) Patterns
RegEx_Patterns_App_Specific() {

	Category="(client|cname|config|database|default|delegation-only|dispatch|dnssec|edns-disabled|general|lame-server|network|notify|queries|query-errors|rate-limit|resolver|rpz|security|spill|unmatched|update|update-security|xfer-in|xfer-out)"
#	Severity="(critical|error|warning|notice|info|debug\( .*\)?|dynamic)"
	Severity="(critical|error|warning|notice|info|debug|dynamic)"

# Client_Security Logging Channel
	Query="(query .*(cache).* (denied))"

	Type="($Query)"

	  SECURITY_Scrape_RegEx="^.* $Category: $Severity: client ?(@0x[[:xdigit:]]+)? (($IPV4ADDR(/$IPV4CIDR)?)|($IPV6ADDR(/$IPV6CIDR)?))(#[0-9]+)?.* $Type.*$"

	      Query_Cache_RegEx="^.* $Category: $Severity: client ?(@0x[[:xdigit:]]+)? (($IPV4ADDR)|($IPV6ADDR))#.* query .*cache.* denied$"
	  SECURITY_STATIC_RegEx="^.* security: $Severity: client ?(@0x[[:xdigit:]]+)? (($IPV4ADDR(/$IPV4CIDR)?)|($IPV6ADDR(/$IPV6CIDR)?))(#[0-9]+)?.* STATIC.*$"

# Query_Errors Logging Channel
#	Query_Error="(query failed \(SERVFAIL\) for (($IPV4ADDR(/$IPV4CIDR)?)|($IPV6ADDR(/$IPV6CIDR)?))"
#	Type="($Query_Error)"
#	QUERY_ERRORS_Scrape_RegEx="^.* $Category: $Severity: client ?(@0x[[:xdigit:]]+)? (($IPV4ADDR(/$IPV4CIDR)?)|($IPV6ADDR(/$IPV6CIDR)?))(#[0-9]+)?.* $Type.*$"
#
#			Query_Error_RegEx="^.* query-errors: info: client ?(@0x[[:xdigit:]]+)? (($IPV4ADDR)|($IPV6ADDR))#.* $Query_Error.*$"
#	QUERY_ERRORS_STATIC_RegEx="^.* query-errors: info: client ?(@0x[[:xdigit:]]+)? (($IPV4ADDR)|($IPV6ADDR))#.* STATIC.*$"

# Rate_Limiting Logging Channel
	Rate_Limit="(NODATA|NXDOMAIN|REFUSED)"
	Type="($Rate_Limit)"
	  RATE_LIMIT_Scrape_RegEx="^.* $Category: $Severity: limit ?($Type)? ?(error)? responses to (($IPV4ADDR(/$IPV4CIDR)?)|($IPV6ADDR(/$IPV6CIDR)?))(#[0-9]+)?.*$"

	  Rate_Limit_NODATA_RegEx="^.* $Category: $Severity: limit NODATA responses to (($IPV4ADDR(/$IPV4CIDR)?)|($IPV6ADDR(/$IPV6CIDR)?))(#[0-9]+)?.*$"
	Rate_Limit_NXDOMAIN_RegEx="^.* $Category: $Severity: limit NXDOMAIN responses to (($IPV4ADDR(/$IPV4CIDR)?)|($IPV6ADDR(/$IPV6CIDR)?))(#[0-9]+)?.*$"
	 Rate_Limit_REFUSED_RegEx="^.* $Category: $Severity: limit REFUSED error responses to (($IPV4ADDR(/$IPV4CIDR)?)|($IPV6ADDR(/$IPV6CIDR)?))(#[0-9]+)?.*$"
		 Rate_Limit_ALL_RegEx="^.* $Category: $Severity: limit ?($Type)? ?(error)? responses to (($IPV4ADDR(/$IPV4CIDR)?)|($IPV6ADDR(/$IPV6CIDR)?))(#[0-9]+)?.*$"
	  RATE_LIMIT_STATIC_RegEx="^.* rate-limit: $Severity: limit ?($Type)? ?(error)? responses to (($IPV4ADDR(/$IPV4CIDR)?)|($IPV6ADDR(/$IPV6CIDR)?))(#[0-9]+)?.* STATIC.*$"
}


Log_Set_Type_Scrape_Unique() {
	local LOG_SET_TYPE_SCRAPE="$1"
	local Log_Set_Type_IP_Addresses=''

	Log_Set_Type_IP_Addresses=$(printf "%s" "$LOG_SET_TYPE_SCRAPE" \
	|sort -b -k 1b,1bV -k 2.8b,2.11bnr -k 2.4b,2.6bMr -k 2.1b,2.2bnr -k 3b,3br \
	|uniq -c -f 0 -w 18 \
	|sort -b           -k 3.8b,3.11bn -k 3.4b,3.6bM -k 3.1b,3.2bn -k 4b,4b -k 2b,2bV)	# Sort by Date/Time/IP address
#	|sort -b -k 2b,2bV -k 3.8b,3.11bn -k 3.4b,3.6bM -k 3.1b,3.2bn -k 4b,4b          )	# Sort by IP address/Date/Time

	printf "%s" "${Log_Set_Type_IP_Addresses}"
}


DIR="${BASH_SOURCE%/*}"
#if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "$DIR/ADF.IP_Addresses.Common.sh"

Main $@
